client:
  image:
    repository: ghcr.io/aet-devops25/team-server-down/client
    tag: ""
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  replicaCount: 1
  env:
    - name: KEYCLOAK_CLIENT_SECRET
      value: SXiMvr1GG10bk2J63ODZC9SOaoAZ4dbe
    - name: NEXTAUTH_URL
      value: 'https://{{ .Values.client.url }}/api/auth/'
    - name: NEXTAUTH_SECRET
      value: feZJWB3mcQ93VBmqHKQI5er5NEIxcDPb3wtT/KaLB9s=
    - name: KEYCLOAK_CLIENT_ID
      value: webclient
    - name: KEYCLOAK_ISSUER
      value: 'https://{{ .Values.auth.url }}/realms/{{ .Values.namespace }}'
    - name: KEYCLOAK_END_SESSION_ENDPOINT
      value: 'https://{{ .Values.auth.url }}/realms/{{ .Values.namespace }}/protocol/openid-connect/logout'

server:
  image:
    repository: ghcr.io/aet-devops25/team-server-down/server
    tag: ""
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 9091
    targetPort: 9091
  env:
    - name: DB_HOST
      value: '{{ printf "%s-postgresql" .Release.Name }}'
    - name: DB_PORT
      value: "5432"
    - name: DB_NAME
      value: main
    - name: DB_USER
      value: postgres
    - name: DB_PASSWORD
      value: password
    - name: ALLOWED_ORIGIN
      value: 'https://{{ .Values.client.url }}'
    - name: IDP_INTERNAL_URI
      value: 'https://{{ .Values.auth.url }}/realms/{{ .Values.namespace }}'
    - name: IDP_EXTERNAL_URI
      value: 'https://{{ .Values.auth.url }}/realms/{{ .Values.namespace }}'
    - name: SERVER_URL
      value: 'https://{{ .Values.server.url }}'
  replicaCount: 1

realtime:
  image:
    repository: ghcr.io/aet-devops25/team-server-down/realtime
    tag: ""
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 9090
    targetPort: 9090
  env:
    - name: REDIS_HOST
      value: '{{ printf "%s-redis-master" .Release.Name }}'
    - name: REDIS_PORT
      value: "6379"
  replicaCount: 1

postgresql:
  primary:
    extraEnvVars:
      - name: POSTGRES_USER
        value: postgres
      - name: POSTGRES_PASSWORD
        value: password
      - name: POSTGRES_MULTIPLE_DATABASES
        value: "main,keycloak"
    extraVolumes:
      - name: db-init
        configMap:
          name: postgresql-configmap
    extraVolumeMounts:
      - name: db-init
        mountPath: /docker-entrypoint-initdb.d

redis:
  auth:
    enabled: false

keycloak:
  ingress:
    enabled: false
  auth:
    adminUser: admin
    adminPassword: password
  postgresql:
    enabled: false
  externalDatabase:
    host: '{{ printf "%s-postgresql" .Release.Name }}'
    user: postgres
    password: password
    database: keycloak
    port: 5432
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm"
    - name: KC_PROXY
      value: edge
    - name: KC_PROXY_HEADERS
      value: xforwarded
    - name: KC_HOSTNAME
      value: '{{ .Values.auth.url }}'
  extraVolumes:
    - name: realm-export
      configMap:
        name: keycloak-configmap
  extraVolumeMounts:
    - name: realm-export
      mountPath: /opt/bitnami/keycloak/data/import

genai:
  image:
    repository: ghcr.io/aet-devops25/team-server-down/genai
    tag: ""
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  env:
    - name: OPEN_WEB_UI_API_KEY
      value: '{{ .Values.genai.apiKey }}'
    - name: SERVER_URL
      value: 'https://{{ .Values.server.url }}'
    - name: CLIENT_URL
      value: 'https://{{ .Values.client.url }}'
    - name: GENAI_URL
      value: 'https://{{ .Values.genai.url }}'
    - name: API_URL
      value: 'https://gpu.aet.cit.tum.de/api/chat/completions'

grafana:
  rbac:
    create: true
    namespaced: true
  adminUser: admin
  adminPassword: admin

prometheus:
  rbac:
    create: false
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false

loki:
  commonConfig:
    replication_factor: 1
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true
  ruler:
    enable_api: true
  minio:
    enabled: true
  deploymentMode: SingleBinary
  singleBinary:
    replicas: 1
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0
  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
  tls:
    hosts:
      - '{{ .Values.client.url }}'
      - '{{ .Values.server.url }}'
      - '{{ .Values.auth.url }}'
      - '{{ .Values.genai.url }}'
      - '{{ .Values.realtime.url }}'
      - '{{ .Values.metrics.url }}'
    secretName: '{{ .Values.namespace }}-whiteboard-devops25-tls'
  rules:
    - host: '{{ .Values.client.url }}'
      paths:
        - path: /
          pathType: Prefix
          service:
              name: '{{ printf "%s-client" .Release.Name }}'
              port:
                number: 3000
    - host: '{{ .Values.server.url }}'
      paths:
        - path: /
          pathType: Prefix
          service:
            name: '{{ printf "%s-server" .Release.Name }}'
            port:
              number: 9091
    - host: '{{ .Values.auth.url }}'
      paths:
        - path: /
          pathType: Prefix
          service:
            name: '{{ printf "%s-keycloak" .Release.Name }}'
            port:
              number: 80
    - host: '{{ .Values.genai.url }}'
      paths:  
        - path: /
          pathType: Prefix
          service:
            name: '{{ printf "%s-genai" .Release.Name }}'
            port:
              number: 8000
    - host: '{{ .Values.realtime.url }}'
      paths:
        - path: /
          pathType: Prefix
          service:
            name: '{{ printf "%s-realtime" .Release.Name }}'
            port:
              number: 9090
    - host: '{{ .Values.metrics.url }}'
      paths:
        - path: /
          pathType: Prefix
          service:
            name: '{{ printf "%s-grafana" .Release.Name }}'
            port:
              number: 3000
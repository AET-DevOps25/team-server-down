name: team-server-down

services:
  keycloak:
    restart: always
    build:
      context: ./docker/keycloak
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    command:
      - start-dev
      - --import-realm
      - -Dkeycloak.migration.strategy=OVERWRITE_EXISTING
      - --transaction-xa-enabled=false
    depends_on:
      db:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/keycloak
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: password
      KC_HOSTNAME: localhost
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HEALTH_ENABLED: true
    volumes:
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    networks:
      - server

  server:
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/"]
      interval: 10s
      timeout: 3s
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-main}
      DB_USER: ${DB_USER:-root}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      ALLOWED_ORIGIN: ${ALLOWED_ORIGIN:-http://localhost:3000}
      IDP_INTERNAL_URI: ${IDP_INTERNAL_URI:-http://keycloak:8080/realms/development}
      IDP_EXTERNAL_URI: ${IDP_EXTERNAL_URI:-http://localhost:8080/realms/development}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "9091:9091"
    volumes:
      - ./server:/app
    networks:
      - server

  client:
    restart: always
    build:
      context: ./client
      dockerfile: Dockerfile.local
    entrypoint: npm run dev
    volumes:
      - ./client:/app
      - node-modules-client:/app/node_modules
    healthcheck:
      test: "curl -f http://localhost:3000 || exit 1"
      interval: 5s
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:9091}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000/api/auth/}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-feZJWB3mcQ93VBmqHKQI5er5NEIxcDPb3wtT/KaLB9s=}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-webclient}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER:-http://keycloak:8080/realms/development}
      KEYCLOAK_END_SESSION_ENDPOINT: ${KEYCLOAK_END_SESSION_ENDPOINT:-http://keycloak:8080/realms/development/protocol/openid-connect/logout}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-SXiMvr1GG10bk2J63ODZC9SOaoAZ4dbe}
    ports:
      - "3000:3000"
    networks:
      - server

  db:
    restart: always
    build:
      context: ./docker/postgresql
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U root -d main'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - server

  genai:
    restart: always
    build:
      context: ./genai
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DB_HOST: ${DB_HOST:-weaviate}
      DB_PORT: ${DB_PORT:-9090}
      DB_GRPC_PORT: ${DB_GRPC_PORT:-50051}
    depends_on:
      - weaviate
    volumes:
      - ./genai:/app
    networks:
      - server
      - rag

  weaviate:
    command: [ "--host", "0.0.0.0", "--port", "9090", "--scheme", "http"]
    image: cr.weaviate.io/semitechnologies/weaviate:1.30.0
    ports:
      - "9090:9090"
      - "50051:50051"
    volumes:
      - weaviate-data:/var/lib/weaviate
    restart: on-failure:0
    environment:
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
      IMAGE_INFERENCE_API: 'http://i2v-neural:8080'
      SPELLCHECK_INFERENCE_API: 'http://text-spellcheck:8080'
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'
      ENABLE_MODULES: 'text2vec-transformers,text-spellcheck,img2vec-neural'
      CLUSTER_HOSTNAME: 'node1'
    networks:
      - rag

  t2v-transformers:
    image: cr.weaviate.io/semitechnologies/transformers-inference:sentence-transformers-multi-qa-MiniLM-L6-cos-v1
    environment:
      ENABLE_CUDA: '0'
    networks:
      - rag

  text-spellcheck:
    image: cr.weaviate.io/semitechnologies/text-spellcheck-model:pyspellchecker-en
    networks:
      - rag

  i2v-neural:
    image: cr.weaviate.io/semitechnologies/img2vec-pytorch:resnet50
    environment:
      ENABLE_CUDA: '0'
    networks:
      - rag

networks:
  server:
  rag:

volumes:
  db-data:
  node-modules-client:
  weaviate-data:
services:
  reverse-proxy:
    image: traefik:v3.4
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@tum.de"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt

  server:
    image: ghcr.io/aet-devops25/team-server-down/server:aws-deployment
#    pull_policy: always
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-postgres}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`${SERVER_HOST}`)"
      - "traefik.http.services.server.loadbalancer.server.port=9091"
      - "traefik.http.routers.server.entrypoints=websecure"
      - "traefik.http.routers.server.tls.certresolver=letsencrypt"

  client:
    image: ghcr.io/aet-devops25/team-server-down/client:aws-deployment
#    pull_policy: always
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:9091}
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      NEXT_PUBLIC_GENAI_URL: ${NEXT_PUBLIC_GENAI_URL:-http://localhost:8000}
      NEXT_PUBLIC_REALTIME_URL: ${NEXT_PUBLIC_REALTIME_URL:-ws://localhost:9090}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000/api/auth/}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-feZJWB3mcQ93VBmqHKQI5er5NEIxcDPb3wtT/KaLB9s=}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-webclient}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER:-http://keycloak:8080/realms/development}
      KEYCLOAK_END_SESSION_ENDPOINT: ${KEYCLOAK_END_SESSION_ENDPOINT:-http://keycloak:8080/realms/development/protocol/openid-connect/logout}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-SXiMvr1GG10bk2J63ODZC9SOaoAZ4dbe}
    depends_on:
      - server
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`${CLIENT_HOST}`)"
      - "traefik.http.services.client.loadbalancer.server.port=3000"
      - "traefik.http.routers.client.entrypoints=websecure"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.client-compress.compress=true"
      - "traefik.http.routers.client.middlewares=client-compress"
      - "traefik.http.routers.client.priority=1"

  db:
    image: postgres:16.2-bullseye
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - /mnt/ebs/db-data:/var/lib/postgresql/data
    networks:
      - server
  genai:
    restart: always
    image: ghcr.io/aet-devops25/team-server-down/genai:aws-deployment
#    pull_policy: always
    environment:
      OPEN_WEB_UI_API_KEY: sk-7eb81f98e32f48aaa59b315f73485aaa
      SERVER_URL: ${SERVER_URL:-http://localhost:9091}
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      GENAI_URL: ${GENAI_URL:-http://localhost:8000}
      API_URL: ${API_URL:-https://gpu.aet.cit.tum.de/api/chat/completions}
    volumes:
      - ./genai:/app
    networks:
      - server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.genai.rule=Host(`${GENAI_HOST}`)"
      - "traefik.http.services.genai.loadbalancer.server.port=8000"
      - "traefik.http.routers.genai.entrypoints=websecure"
      - "traefik.http.routers.genai.tls.certresolver=letsencrypt"


  keycloak:
    restart: always
    image: quay.io/keycloak/keycloak:24.0.1
    ports:
      - "8080:8080"
    command:
      - start-dev
      - --import-realm
      - --transaction-xa-enabled=false
    depends_on:
      db:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: password
      KC_HOSTNAME: auth.whiteboard.student.k8s.aet.cit.tum.de
      KC_PROXY: edge
      KC_PROXY_HEADERS: xforwarded
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HEALTH_ENABLED: true
    volumes:
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    networks:
      - server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_HOST}`)"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"

volumes:
  db-data:


networks:
  server:

name: Build and Publish Docker Image to GHCR

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set REPO, TAG, NAMESPACE, and VALUES_FILE environment variables
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "TAG=latest" >> $GITHUB_ENV
            echo "NAMESPACE=tsd-prod" >> $GITHUB_ENV
            echo "VALUES_FILE=./whiteboard-app/staging.values.yaml" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == "develop" ]]; then
            echo "TAG=develop" >> $GITHUB_ENV
            echo "NAMESPACE=tsd-staging" >> $GITHUB_ENV
            echo "VALUES_FILE=./whiteboard-app/production.values.yaml" >> $GITHUB_ENV
          fi

      - name: Client -> Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ghcr.io/${{ env.REPO }}/client:${{ env.TAG }}
          platforms: linux/amd64

      - name: Server -> Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ghcr.io/${{ env.REPO }}/server:${{ env.TAG }}
          platforms: linux/amd64


      - name: Set up Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy App with Helm
        run: |
          helm upgrade whiteboard ./helm/whiteboard-app/ \
            -f ${{ env.VALUES_FILE }} \
            -n ${{ env.NAMESPACE }} \
            --kubeconfig ${{ env.KUBECONFIG }}

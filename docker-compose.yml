name: team-server-down

services:
  nginx:
    restart: always
    image: nginx:stable-alpine
    healthcheck:
      test: "curl -f http://localhost:80 || exit 1"
      interval: 5s
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/cert.crt:/etc/nginx/cert.crt:ro
      - ./docker/nginx/private.key:/etc/nginx/private.key:ro
    depends_on:
      - server
    ports:
      - "80:80"
      - "443:443"
    networks:
      - server

  server:
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://server:8080/"]
      interval: 10s
      timeout: 3s
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-postgres}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./server:/app
    networks:
      - server

  client:
    container_name: client
    restart: always
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"       
    networks:
      - server         
   

  db:
    restart: always
    build:
      context: ./docker/postgresql
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - server


networks:
  server:

volumes:
  db-data:


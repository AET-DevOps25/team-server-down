/* tslint:disable */
/* eslint-disable */
/**
 * Team Server Down
 * DevOps Application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface Whiteboard
 */
export interface Whiteboard {
    /**
     * 
     * @type {number}
     * @memberof Whiteboard
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Whiteboard
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Whiteboard
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Whiteboard
     */
    'lastEditedTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof Whiteboard
     */
    'userId'?: number;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a simple Hello World message.
         * @summary Root endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        root: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RootApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a simple Hello World message.
         * @summary Root endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async root(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.root(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RootApi.root']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RootApiFp(configuration)
    return {
        /**
         * Returns a simple Hello World message.
         * @summary Root endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        root(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.root(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
    /**
     * Returns a simple Hello World message.
     * @summary Root endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public root(options?: RawAxiosRequestConfig) {
        return RootApiFp(this.configuration).root(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WhiteboardApi - axios parameter creator
 * @export
 */
export const WhiteboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new whiteboard for a user.
         * @summary Create whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWhiteboard: async (title: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('createWhiteboard', 'title', title)
            const localVarPath = `/whiteboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a whiteboard by its ID if the user owns it.
         * @summary Delete whiteboard
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWhiteboard: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWhiteboard', 'id', id)
            const localVarPath = `/whiteboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhiteboardByIdAndUserId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWhiteboardByIdAndUserId', 'id', id)
            const localVarPath = `/whiteboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of whiteboards for the given user ID.
         * @summary Get whiteboards by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhiteboardsByUserId: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/whiteboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the title of an existing whiteboard.
         * @summary Update title
         * @param {number} id ID of the whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTitle: async (id: number, title: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTitle', 'id', id)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('updateTitle', 'title', title)
            const localVarPath = `/whiteboards/{id}/title`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhiteboardApi - functional programming interface
 * @export
 */
export const WhiteboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhiteboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new whiteboard for a user.
         * @summary Create whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWhiteboard(title: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whiteboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWhiteboard(title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.createWhiteboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a whiteboard by its ID if the user owns it.
         * @summary Delete whiteboard
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWhiteboard(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWhiteboard(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.deleteWhiteboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhiteboardByIdAndUserId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whiteboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhiteboardByIdAndUserId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.getWhiteboardByIdAndUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of whiteboards for the given user ID.
         * @summary Get whiteboards by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhiteboardsByUserId(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Whiteboard>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhiteboardsByUserId(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.getWhiteboardsByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the title of an existing whiteboard.
         * @summary Update title
         * @param {number} id ID of the whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTitle(id: number, title: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whiteboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTitle(id, title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.updateTitle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WhiteboardApi - factory interface
 * @export
 */
export const WhiteboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhiteboardApiFp(configuration)
    return {
        /**
         * Creates a new whiteboard for a user.
         * @summary Create whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWhiteboard(title: string, options?: RawAxiosRequestConfig): AxiosPromise<Whiteboard> {
            return localVarFp.createWhiteboard(title, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a whiteboard by its ID if the user owns it.
         * @summary Delete whiteboard
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWhiteboard(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWhiteboard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhiteboardByIdAndUserId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Whiteboard> {
            return localVarFp.getWhiteboardByIdAndUserId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of whiteboards for the given user ID.
         * @summary Get whiteboards by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhiteboardsByUserId(options?: RawAxiosRequestConfig): AxiosPromise<Array<Whiteboard>> {
            return localVarFp.getWhiteboardsByUserId(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the title of an existing whiteboard.
         * @summary Update title
         * @param {number} id ID of the whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTitle(id: number, title: string, options?: RawAxiosRequestConfig): AxiosPromise<Whiteboard> {
            return localVarFp.updateTitle(id, title, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhiteboardApi - object-oriented interface
 * @export
 * @class WhiteboardApi
 * @extends {BaseAPI}
 */
export class WhiteboardApi extends BaseAPI {
    /**
     * Creates a new whiteboard for a user.
     * @summary Create whiteboard
     * @param {string} title 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public createWhiteboard(title: string, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).createWhiteboard(title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a whiteboard by its ID if the user owns it.
     * @summary Delete whiteboard
     * @param {number} id ID of the whiteboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public deleteWhiteboard(id: number, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).deleteWhiteboard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id ID of the whiteboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public getWhiteboardByIdAndUserId(id: number, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).getWhiteboardByIdAndUserId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of whiteboards for the given user ID.
     * @summary Get whiteboards by user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public getWhiteboardsByUserId(options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).getWhiteboardsByUserId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the title of an existing whiteboard.
     * @summary Update title
     * @param {number} id ID of the whiteboard
     * @param {string} title 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public updateTitle(id: number, title: string, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).updateTitle(id, title, options).then((request) => request(this.axios, this.basePath));
    }
}




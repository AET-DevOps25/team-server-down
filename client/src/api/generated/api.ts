/* tslint:disable */
/* eslint-disable */
/**
 * Team Server Down
 * DevOps Application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Edge
 */
export interface Edge {
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Edge
     */
    'whiteboardId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'sourceHandle'?: string;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'target'?: string;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'targetHandle'?: string;
}
/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'whiteboardId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'positionX'?: number;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'positionY'?: number;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'label'?: string;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'height'?: number;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'borderColor'?: string;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'borderWidth'?: number;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'borderOpacity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'opacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'textColor'?: string;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'fontSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'fontFamily'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Node
     */
    'bold'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Node
     */
    'italic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Node
     */
    'strikethrough'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Node
     */
    'underline'?: boolean;
}
/**
 * 
 * @export
 * @interface NodeUpdateDTO
 */
export interface NodeUpdateDTO {
    /**
     * 
     * @type {string}
     * @memberof NodeUpdateDTO
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeUpdateDTO
     */
    'positionX'?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeUpdateDTO
     */
    'positionY'?: number;
    /**
     * 
     * @type {string}
     * @memberof NodeUpdateDTO
     */
    'label'?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeUpdateDTO
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeUpdateDTO
     */
    'height'?: number;
    /**
     * 
     * @type {string}
     * @memberof NodeUpdateDTO
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeUpdateDTO
     */
    'borderColor'?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeUpdateDTO
     */
    'borderWidth'?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeUpdateDTO
     */
    'borderOpacity'?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeUpdateDTO
     */
    'opacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof NodeUpdateDTO
     */
    'textColor'?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeUpdateDTO
     */
    'fontSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof NodeUpdateDTO
     */
    'fontFamily'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NodeUpdateDTO
     */
    'isBold'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NodeUpdateDTO
     */
    'isItalic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NodeUpdateDTO
     */
    'isStrikethrough'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NodeUpdateDTO
     */
    'isUnderline'?: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface Viewport
 */
export interface Viewport {
    /**
     * 
     * @type {number}
     * @memberof Viewport
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Viewport
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof Viewport
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof Viewport
     */
    'zoom'?: number;
    /**
     * 
     * @type {number}
     * @memberof Viewport
     */
    'whiteboardId'?: number;
}
/**
 * 
 * @export
 * @interface ViewportCreateRequest
 */
export interface ViewportCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof ViewportCreateRequest
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof ViewportCreateRequest
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof ViewportCreateRequest
     */
    'zoom'?: number;
    /**
     * 
     * @type {number}
     * @memberof ViewportCreateRequest
     */
    'whiteboardId'?: number;
}
/**
 * 
 * @export
 * @interface ViewportDto
 */
export interface ViewportDto {
    /**
     * 
     * @type {number}
     * @memberof ViewportDto
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof ViewportDto
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof ViewportDto
     */
    'zoom'?: number;
}
/**
 * 
 * @export
 * @interface Whiteboard
 */
export interface Whiteboard {
    /**
     * 
     * @type {number}
     * @memberof Whiteboard
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Whiteboard
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Whiteboard
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Whiteboard
     */
    'lastUpdatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Whiteboard
     */
    'userId'?: number;
}
/**
 * 
 * @export
 * @interface WhiteboardStateDto
 */
export interface WhiteboardStateDto {
    /**
     * 
     * @type {Array<Node>}
     * @memberof WhiteboardStateDto
     */
    'nodes'?: Array<Node>;
    /**
     * 
     * @type {Array<Edge>}
     * @memberof WhiteboardStateDto
     */
    'edges'?: Array<Edge>;
    /**
     * 
     * @type {ViewportDto}
     * @memberof WhiteboardStateDto
     */
    'viewportDto'?: ViewportDto;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EdgeControllerApi - axios parameter creator
 * @export
 */
export const EdgeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Edge} edge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEdge: async (edge: Edge, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'edge' is not null or undefined
            assertParamExists('addEdge', 'edge', edge)
            const localVarPath = `/edge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(edge, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEdge: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEdge', 'id', id)
            const localVarPath = `/edge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdgesByWhiteboard: async (whiteboardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whiteboardId' is not null or undefined
            assertParamExists('getEdgesByWhiteboard', 'whiteboardId', whiteboardId)
            const localVarPath = `/edge/whiteboard/{whiteboardId}`
                .replace(`{${"whiteboardId"}}`, encodeURIComponent(String(whiteboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdgeControllerApi - functional programming interface
 * @export
 */
export const EdgeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EdgeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Edge} edge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEdge(edge: Edge, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Edge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEdge(edge, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EdgeControllerApi.addEdge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEdge(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEdge(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EdgeControllerApi.deleteEdge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEdgesByWhiteboard(whiteboardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Edge>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEdgesByWhiteboard(whiteboardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EdgeControllerApi.getEdgesByWhiteboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EdgeControllerApi - factory interface
 * @export
 */
export const EdgeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EdgeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Edge} edge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEdge(edge: Edge, options?: RawAxiosRequestConfig): AxiosPromise<Edge> {
            return localVarFp.addEdge(edge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEdge(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEdge(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEdgesByWhiteboard(whiteboardId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Edge>> {
            return localVarFp.getEdgesByWhiteboard(whiteboardId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EdgeControllerApi - object-oriented interface
 * @export
 * @class EdgeControllerApi
 * @extends {BaseAPI}
 */
export class EdgeControllerApi extends BaseAPI {
    /**
     * 
     * @param {Edge} edge 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeControllerApi
     */
    public addEdge(edge: Edge, options?: RawAxiosRequestConfig) {
        return EdgeControllerApiFp(this.configuration).addEdge(edge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeControllerApi
     */
    public deleteEdge(id: string, options?: RawAxiosRequestConfig) {
        return EdgeControllerApiFp(this.configuration).deleteEdge(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} whiteboardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdgeControllerApi
     */
    public getEdgesByWhiteboard(whiteboardId: number, options?: RawAxiosRequestConfig) {
        return EdgeControllerApiFp(this.configuration).getEdgesByWhiteboard(whiteboardId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NodeControllerApi - axios parameter creator
 * @export
 */
export const NodeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Node} node 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNode: async (node: Node, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'node' is not null or undefined
            assertParamExists('createNode', 'node', node)
            const localVarPath = `/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(node, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNode: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNode', 'id', id)
            const localVarPath = `/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByWhiteboardId: async (whiteboardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whiteboardId' is not null or undefined
            assertParamExists('getAllByWhiteboardId', 'whiteboardId', whiteboardId)
            const localVarPath = `/nodes/whiteboard/{whiteboardId}`
                .replace(`{${"whiteboardId"}}`, encodeURIComponent(String(whiteboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {NodeUpdateDTO} nodeUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNode: async (id: string, nodeUpdateDTO: NodeUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchNode', 'id', id)
            // verify required parameter 'nodeUpdateDTO' is not null or undefined
            assertParamExists('patchNode', 'nodeUpdateDTO', nodeUpdateDTO)
            const localVarPath = `/nodes/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeControllerApi - functional programming interface
 * @export
 */
export const NodeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Node} node 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNode(node: Node, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Node>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNode(node, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.createNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNode(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNode(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.deleteNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByWhiteboardId(whiteboardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Node>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByWhiteboardId(whiteboardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.getAllByWhiteboardId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {NodeUpdateDTO} nodeUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchNode(id: string, nodeUpdateDTO: NodeUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Node>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchNode(id, nodeUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeControllerApi.patchNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NodeControllerApi - factory interface
 * @export
 */
export const NodeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Node} node 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNode(node: Node, options?: RawAxiosRequestConfig): AxiosPromise<Node> {
            return localVarFp.createNode(node, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNode(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteNode(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByWhiteboardId(whiteboardId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Node>> {
            return localVarFp.getAllByWhiteboardId(whiteboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {NodeUpdateDTO} nodeUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNode(id: string, nodeUpdateDTO: NodeUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<Node> {
            return localVarFp.patchNode(id, nodeUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeControllerApi - object-oriented interface
 * @export
 * @class NodeControllerApi
 * @extends {BaseAPI}
 */
export class NodeControllerApi extends BaseAPI {
    /**
     * 
     * @param {Node} node 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public createNode(node: Node, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).createNode(node, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public deleteNode(id: string, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).deleteNode(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} whiteboardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public getAllByWhiteboardId(whiteboardId: number, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).getAllByWhiteboardId(whiteboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {NodeUpdateDTO} nodeUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeControllerApi
     */
    public patchNode(id: string, nodeUpdateDTO: NodeUpdateDTO, options?: RawAxiosRequestConfig) {
        return NodeControllerApiFp(this.configuration).patchNode(id, nodeUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a simple Hello World message.
         * @summary Root endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        root: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RootApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a simple Hello World message.
         * @summary Root endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async root(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.root(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RootApi.root']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RootApiFp(configuration)
    return {
        /**
         * Returns a simple Hello World message.
         * @summary Root endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        root(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.root(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
    /**
     * Returns a simple Hello World message.
     * @summary Root endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public root(options?: RawAxiosRequestConfig) {
        return RootApiFp(this.configuration).root(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ViewportControllerApi - axios parameter creator
 * @export
 */
export const ViewportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ViewportCreateRequest} viewportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewport: async (viewportCreateRequest: ViewportCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'viewportCreateRequest' is not null or undefined
            assertParamExists('createViewport', 'viewportCreateRequest', viewportCreateRequest)
            const localVarPath = `/api/viewports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(viewportCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViewport: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteViewport', 'id', id)
            const localVarPath = `/api/viewports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewportByWhiteboardId: async (whiteboardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whiteboardId' is not null or undefined
            assertParamExists('getViewportByWhiteboardId', 'whiteboardId', whiteboardId)
            const localVarPath = `/api/viewports/whiteboard/{whiteboardId}`
                .replace(`{${"whiteboardId"}}`, encodeURIComponent(String(whiteboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {Viewport} viewport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewportByWhiteboardId: async (whiteboardId: number, viewport: Viewport, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whiteboardId' is not null or undefined
            assertParamExists('updateViewportByWhiteboardId', 'whiteboardId', whiteboardId)
            // verify required parameter 'viewport' is not null or undefined
            assertParamExists('updateViewportByWhiteboardId', 'viewport', viewport)
            const localVarPath = `/api/viewports/whiteboard/{whiteboardId}`
                .replace(`{${"whiteboardId"}}`, encodeURIComponent(String(whiteboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(viewport, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewportControllerApi - functional programming interface
 * @export
 */
export const ViewportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViewportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ViewportCreateRequest} viewportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createViewport(viewportCreateRequest: ViewportCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Viewport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createViewport(viewportCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ViewportControllerApi.createViewport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteViewport(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteViewport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ViewportControllerApi.deleteViewport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getViewportByWhiteboardId(whiteboardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Viewport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getViewportByWhiteboardId(whiteboardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ViewportControllerApi.getViewportByWhiteboardId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {Viewport} viewport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateViewportByWhiteboardId(whiteboardId: number, viewport: Viewport, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Viewport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateViewportByWhiteboardId(whiteboardId, viewport, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ViewportControllerApi.updateViewportByWhiteboardId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ViewportControllerApi - factory interface
 * @export
 */
export const ViewportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViewportControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ViewportCreateRequest} viewportCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewport(viewportCreateRequest: ViewportCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Viewport> {
            return localVarFp.createViewport(viewportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViewport(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteViewport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewportByWhiteboardId(whiteboardId: number, options?: RawAxiosRequestConfig): AxiosPromise<Viewport> {
            return localVarFp.getViewportByWhiteboardId(whiteboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {Viewport} viewport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewportByWhiteboardId(whiteboardId: number, viewport: Viewport, options?: RawAxiosRequestConfig): AxiosPromise<Viewport> {
            return localVarFp.updateViewportByWhiteboardId(whiteboardId, viewport, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViewportControllerApi - object-oriented interface
 * @export
 * @class ViewportControllerApi
 * @extends {BaseAPI}
 */
export class ViewportControllerApi extends BaseAPI {
    /**
     * 
     * @param {ViewportCreateRequest} viewportCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewportControllerApi
     */
    public createViewport(viewportCreateRequest: ViewportCreateRequest, options?: RawAxiosRequestConfig) {
        return ViewportControllerApiFp(this.configuration).createViewport(viewportCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewportControllerApi
     */
    public deleteViewport(id: number, options?: RawAxiosRequestConfig) {
        return ViewportControllerApiFp(this.configuration).deleteViewport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} whiteboardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewportControllerApi
     */
    public getViewportByWhiteboardId(whiteboardId: number, options?: RawAxiosRequestConfig) {
        return ViewportControllerApiFp(this.configuration).getViewportByWhiteboardId(whiteboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} whiteboardId 
     * @param {Viewport} viewport 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewportControllerApi
     */
    public updateViewportByWhiteboardId(whiteboardId: number, viewport: Viewport, options?: RawAxiosRequestConfig) {
        return ViewportControllerApiFp(this.configuration).updateViewportByWhiteboardId(whiteboardId, viewport, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WhiteboardApi - axios parameter creator
 * @export
 */
export const WhiteboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new whiteboard for a user.
         * @summary Create whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWhiteboard: async (title: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('createWhiteboard', 'title', title)
            const localVarPath = `/whiteboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWhiteboard: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWhiteboard', 'id', id)
            const localVarPath = `/whiteboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of whiteboards for the current user.
         * @summary Get whiteboards by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWhiteboards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/whiteboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhiteboardById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWhiteboardById', 'id', id)
            const localVarPath = `/whiteboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {WhiteboardStateDto} whiteboardStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveWhiteboardState: async (whiteboardId: number, whiteboardStateDto: WhiteboardStateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whiteboardId' is not null or undefined
            assertParamExists('saveWhiteboardState', 'whiteboardId', whiteboardId)
            // verify required parameter 'whiteboardStateDto' is not null or undefined
            assertParamExists('saveWhiteboardState', 'whiteboardStateDto', whiteboardStateDto)
            const localVarPath = `/whiteboards/{whiteboardId}/save`
                .replace(`{${"whiteboardId"}}`, encodeURIComponent(String(whiteboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(whiteboardStateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the title of an existing whiteboard.
         * @summary Update title
         * @param {number} id ID of the whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTitle: async (id: number, title: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTitle', 'id', id)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('updateTitle', 'title', title)
            const localVarPath = `/whiteboards/{id}/title`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak", [], configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhiteboardApi - functional programming interface
 * @export
 */
export const WhiteboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhiteboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new whiteboard for a user.
         * @summary Create whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWhiteboard(title: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whiteboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWhiteboard(title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.createWhiteboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWhiteboard(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWhiteboard(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.deleteWhiteboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of whiteboards for the current user.
         * @summary Get whiteboards by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserWhiteboards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Whiteboard>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserWhiteboards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.getUserWhiteboards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhiteboardById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whiteboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhiteboardById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.getWhiteboardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {WhiteboardStateDto} whiteboardStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveWhiteboardState(whiteboardId: number, whiteboardStateDto: WhiteboardStateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveWhiteboardState(whiteboardId, whiteboardStateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.saveWhiteboardState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the title of an existing whiteboard.
         * @summary Update title
         * @param {number} id ID of the whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTitle(id: number, title: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whiteboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTitle(id, title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WhiteboardApi.updateTitle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WhiteboardApi - factory interface
 * @export
 */
export const WhiteboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhiteboardApiFp(configuration)
    return {
        /**
         * Creates a new whiteboard for a user.
         * @summary Create whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWhiteboard(title: string, options?: RawAxiosRequestConfig): AxiosPromise<Whiteboard> {
            return localVarFp.createWhiteboard(title, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWhiteboard(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWhiteboard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of whiteboards for the current user.
         * @summary Get whiteboards by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWhiteboards(options?: RawAxiosRequestConfig): AxiosPromise<Array<Whiteboard>> {
            return localVarFp.getUserWhiteboards(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id ID of the whiteboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhiteboardById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Whiteboard> {
            return localVarFp.getWhiteboardById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} whiteboardId 
         * @param {WhiteboardStateDto} whiteboardStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveWhiteboardState(whiteboardId: number, whiteboardStateDto: WhiteboardStateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.saveWhiteboardState(whiteboardId, whiteboardStateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the title of an existing whiteboard.
         * @summary Update title
         * @param {number} id ID of the whiteboard
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTitle(id: number, title: string, options?: RawAxiosRequestConfig): AxiosPromise<Whiteboard> {
            return localVarFp.updateTitle(id, title, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhiteboardApi - object-oriented interface
 * @export
 * @class WhiteboardApi
 * @extends {BaseAPI}
 */
export class WhiteboardApi extends BaseAPI {
    /**
     * Creates a new whiteboard for a user.
     * @summary Create whiteboard
     * @param {string} title 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public createWhiteboard(title: string, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).createWhiteboard(title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public deleteWhiteboard(id: number, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).deleteWhiteboard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of whiteboards for the current user.
     * @summary Get whiteboards by user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public getUserWhiteboards(options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).getUserWhiteboards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id ID of the whiteboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public getWhiteboardById(id: number, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).getWhiteboardById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} whiteboardId 
     * @param {WhiteboardStateDto} whiteboardStateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public saveWhiteboardState(whiteboardId: number, whiteboardStateDto: WhiteboardStateDto, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).saveWhiteboardState(whiteboardId, whiteboardStateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the title of an existing whiteboard.
     * @summary Update title
     * @param {number} id ID of the whiteboard
     * @param {string} title 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteboardApi
     */
    public updateTitle(id: number, title: string, options?: RawAxiosRequestConfig) {
        return WhiteboardApiFp(this.configuration).updateTitle(id, title, options).then((request) => request(this.axios, this.basePath));
    }
}



